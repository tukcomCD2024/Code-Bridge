{"version":3,"file":"y-mongodb.cjs","sources":["../src/mongo-adapter.js","../src/utils.js","../src/y-mongodb.js"],"sourcesContent":["import { MongoClient } from 'mongodb';\n\nfunction parseMongoDBConnectionString(connectionString) {\n\tconst url = new URL(connectionString);\n\tconst database = url.pathname.slice(1);\n\turl.pathname = '/';\n\n\treturn {\n\t\tdatabase,\n\t\tlinkWithoutDatabase: url.toString(),\n\t};\n}\nexport class MongoAdapter {\n\t/**\n\t * Create a MongoAdapter instance.\n\t * @param {string} connectionString\n\t * @param {object} opts\n\t * @param {string} opts.collection Name of the collection where all documents are stored.\n\t * @param {boolean} opts.multipleCollections When set to true, each document gets an own\n\t * collection (instead of all documents stored in the same one).\n\t * When set to true, the option $collection gets ignored.\n\t */\n\tconstructor(connectionString, { collection, multipleCollections }) {\n\t\tthis.collection = collection;\n\t\tthis.multipleCollections = multipleCollections;\n\t\tconst connectionParams = parseMongoDBConnectionString(connectionString);\n\t\tthis.mongoUrl = connectionParams.linkWithoutDatabase;\n\t\tthis.databaseName = connectionParams.database;\n\t\tthis.client = new MongoClient(this.mongoUrl);\n\t\t/*\n\t\t\tclient.connect() is optional since v4.7\n\t\t\t\"However, MongoClient.connect can still be called manually and remains useful for\n\t\t\tlearning about misconfiguration (auth, server not started, connection string correctness)\n\t\t\tearly in your application's startup.\"\n\n\t\t\tI will not use it for now, but may change that in the future.\n\t\t*/\n\t\tthis.db = this.client.db(this.databaseName);\n\t}\n\n\t/**\n\t * Get the MongoDB collection name for any docName\n\t * @param {object} opts\n\t * @param {string} opts.docName\n\t * @returns {string} collectionName\n\t */\n\t_getCollectionName({ docName }) {\n\t\tif (this.multipleCollections) {\n\t\t\treturn docName;\n\t\t} else {\n\t\t\treturn this.collection;\n\t\t}\n\t}\n\n\t/**\n\t * Apply a $query and get one document from MongoDB.\n\t * @param {object} query\n\t * @returns {Promise<object>}\n\t */\n\tget(query) {\n\t\tconst collection = this.db.collection(this._getCollectionName(query));\n\t\treturn collection.findOne(query);\n\t}\n\n\t/**\n\t * Store one document in MongoDB.\n\t * @param {object} query\n\t * @param {object} values\n\t * @returns {Promise<object>} Stored document\n\t */\n\tasync put(query, values) {\n\t\tif (!query.docName || !query.version || !values.value) {\n\t\t\tthrow new Error('Document and version must be provided');\n\t\t}\n\n\t\tconst collection = this.db.collection(this._getCollectionName(query));\n\n\t\tawait collection.updateOne(query, { $set: values }, { upsert: true });\n\t\treturn this.get(query);\n\t}\n\n\t/**\n\t * Removes all documents that fit the $query\n\t * @param {object} query\n\t * @returns {Promise<object>} Contains status of the operation\n\t */\n\tdel(query) {\n\t\tconst collection = this.db.collection(this._getCollectionName(query));\n\n\t\t/*\n\t\t\tNote from mongodb v4.7 release notes:\n\t\t\t\"It's a known limitation that explicit sessions (client.startSession) and\n\t\t\tinitializeOrderedBulkOp, initializeUnorderedBulkOp cannot be used until\n\t\t\tMongoClient.connect is first called.\n\t\t\tLook forward to a future patch release that will correct these inconsistencies.\"\n\n\t\t\tI dont know yet if this is a problem for me here.\n\t\t*/\n\t\tconst bulk = collection.initializeOrderedBulkOp();\n\t\tbulk.find(query).delete();\n\t\treturn bulk.execute();\n\t}\n\n\t/**\n\t * Get all or at least $opts.limit documents that fit the $query.\n\t * @param {object} query\n\t * @param {object} [opts]\n\t * @param {number} [opts.limit]\n\t * @param {boolean} [opts.reverse]\n\t * @returns {Promise<Array<object>>}\n\t */\n\treadAsCursor(query, opts = {}) {\n\t\tconst { limit = 0, reverse = false } = opts;\n\n\t\tconst collection = this.db.collection(this._getCollectionName(query));\n\n\t\t/** @type {{ clock: 1 | -1, part: 1 | -1 }} */\n\t\tconst sortQuery = reverse ? { clock: -1, part: 1 } : { clock: 1, part: 1 };\n\t\tconst curs = collection.find(query).sort(sortQuery).limit(limit);\n\n\t\treturn curs.toArray();\n\t}\n\n\t/**\n\t * Close connection to MongoDB instance.\n\t */\n\tasync close() {\n\t\tawait this.client.close();\n\t}\n\n\t/**\n\t * Get all collection names stored on the MongoDB instance.\n\t * @returns {Promise<string[]>}\n\t */\n\tasync getCollectionNames() {\n\t\tconst collectionInfos = await this.db.listCollections().toArray();\n\t\treturn collectionInfos.map((c) => c.name);\n\t}\n\n\t/**\n\t * Delete database\n\t */\n\tasync flush() {\n\t\tawait this.db.dropDatabase();\n\t\tawait this.client.close();\n\t}\n\n\t/**\n\t * Delete collection\n\t * @param {string} collectionName\n\t */\n\tdropCollection(collectionName) {\n\t\treturn this.db.collection(collectionName).drop();\n\t}\n}\n","import * as Y from 'yjs';\nimport * as binary from 'lib0/binary';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport { Buffer } from 'buffer';\n\nexport const PREFERRED_TRIM_SIZE = 400;\nconst MAX_DOCUMENT_SIZE = 15000000; // ~15MB (plus space for metadata)\n\n/**\n * Remove all documents from db with Clock between $from and $to\n *\n * @param {any} db\n * @param {string} docName\n * @param {number} from Greater than or equal\n * @param {number} to lower than (not equal)\n * @return {Promise<void>}\n */\nexport const clearUpdatesRange = async (db, docName, from, to) =>\n\tdb.del({\n\t\tdocName,\n\t\tclock: {\n\t\t\t$gte: from,\n\t\t\t$lt: to,\n\t\t},\n\t});\n\n/**\n * Create a unique key for a update message.\n * @param {string} docName\n * @param {number} [clock] must be unique\n * @return {Object} [opts.version, opts.docName, opts.action, opts.clock]\n */\nexport const createDocumentUpdateKey = (docName, clock) => {\n\tif (clock !== undefined) {\n\t\treturn {\n\t\t\tversion: 'v1',\n\t\t\taction: 'update',\n\t\t\tdocName,\n\t\t\tclock,\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tversion: 'v1',\n\t\t\taction: 'update',\n\t\t\tdocName,\n\t\t};\n\t}\n};\n\n/**\n * We have a separate state vector key so we can iterate efficiently over all documents\n * @param {string} docName\n * @return {Object} [opts.docName, opts.version]\n */\nexport const createDocumentStateVectorKey = (docName) => ({\n\tdocName,\n\tversion: 'v1_sv',\n});\n\n/**\n * @param {string} docName\n * @param {string} metaKey\n * @return {Object} [opts.docName, opts.version, opts.docType, opts.metaKey]\n */\nexport const createDocumentMetaKey = (docName, metaKey) => ({\n\tversion: 'v1',\n\tdocName,\n\tmetaKey: `meta_${metaKey}`,\n});\n\n/**\n * @param {any} db\n * @param {object} query\n * @param {object} opts\n * @return {Promise<any[]>}\n */\nexport const _getMongoBulkData = (db, query, opts) => db.readAsCursor(query, opts);\n\n/**\n * @param {any} db\n * @return {Promise<any>}\n */\nexport const flushDB = (db) => db.flush();\n\n/**\n * Convert the mongo document array to an array of values (as buffers)\n *\n * @param {any[]} docs\n * @return {Buffer[]}\n */\nconst _convertMongoUpdates = (docs) => {\n\tif (!Array.isArray(docs) || !docs.length) return [];\n\n\tconst updates = [];\n\tfor (let i = 0; i < docs.length; i++) {\n\t\tconst doc = docs[i];\n\t\tif (!doc.part) {\n\t\t\tupdates.push(doc.value.buffer);\n\t\t} else if (doc.part === 1) {\n\t\t\t// merge the docs together that got split because of mongodb size limits\n\t\t\tconst parts = [doc.value.buffer];\n\t\t\tlet j;\n\t\t\tlet currentPartId = doc.part;\n\t\t\tfor (j = i + 1; j < docs.length; j++) {\n\t\t\t\tconst part = docs[j];\n\t\t\t\tif (part.clock === doc.clock) {\n\t\t\t\t\tif (currentPartId !== part.part - 1) {\n\t\t\t\t\t\tthrow new Error('Couldnt merge updates together because a part is missing!');\n\t\t\t\t\t}\n\t\t\t\t\tparts.push(part.value.buffer);\n\t\t\t\t\tcurrentPartId = part.part;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdates.push(...parts);\n\t\t}\n\t}\n\treturn updates;\n};\n/**\n * Get all document updates for a specific document.\n *\n * @param {any} db\n * @param {string} docName\n * @param {any} [opts]\n * @return {Promise<any[]>}\n */\nexport const getMongoUpdates = async (db, docName, opts = {}) => {\n\tconst docs = await _getMongoBulkData(db, createDocumentUpdateKey(docName), opts);\n\treturn _convertMongoUpdates(docs);\n};\n\n/**\n * @param {any} db\n * @param {string} docName\n * @return {Promise<number>} Returns -1 if this document doesn't exist yet\n */\nexport const getCurrentUpdateClock = (db, docName) =>\n\t_getMongoBulkData(\n\t\tdb,\n\t\t{\n\t\t\t...createDocumentUpdateKey(docName, 0),\n\t\t\tclock: {\n\t\t\t\t$gte: 0,\n\t\t\t\t$lt: binary.BITS32,\n\t\t\t},\n\t\t},\n\t\t{ reverse: true, limit: 1 },\n\t).then((updates) => {\n\t\tif (updates.length === 0) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn updates[0].clock;\n\t\t}\n\t});\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} sv state vector\n * @param {number} clock current clock of the document so we can determine\n * when this statevector was created\n */\nexport const writeStateVector = async (db, docName, sv, clock) => {\n\tconst encoder = encoding.createEncoder();\n\tencoding.writeVarUint(encoder, clock);\n\tencoding.writeVarUint8Array(encoder, sv);\n\tawait db.put(createDocumentStateVectorKey(docName), {\n\t\tvalue: encoding.toUint8Array(encoder),\n\t});\n};\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} update\n * @return {Promise<number>} Returns the clock of the stored update\n */\nexport const storeUpdate = async (db, docName, update) => {\n\tconst clock = await getCurrentUpdateClock(db, docName);\n\tif (clock === -1) {\n\t\t// make sure that a state vector is always written, so we can search for available documents\n\t\tconst ydoc = new Y.Doc();\n\t\tY.applyUpdate(ydoc, update);\n\t\tconst sv = Y.encodeStateVector(ydoc);\n\t\tawait writeStateVector(db, docName, sv, 0);\n\t}\n\n\t// mongodb has a maximum document size of 16MB;\n\t//  if our buffer exceeds it, we store the update in multiple documents\n\tif (update.length <= MAX_DOCUMENT_SIZE) {\n\t\tawait db.put(createDocumentUpdateKey(docName, clock + 1), {\n\t\t\tvalue: update,\n\t\t});\n\t} else {\n\t\tconst totalChunks = Math.ceil(update.length / MAX_DOCUMENT_SIZE);\n\n\t\tconst putPromises = [];\n\t\tfor (let i = 0; i < totalChunks; i++) {\n\t\t\tconst start = i * MAX_DOCUMENT_SIZE;\n\t\t\tconst end = Math.min(start + MAX_DOCUMENT_SIZE, update.length);\n\t\t\tconst chunk = update.subarray(start, end);\n\n\t\t\tputPromises.push(\n\t\t\t\tdb.put({ ...createDocumentUpdateKey(docName, clock + 1), part: i + 1 }, { value: chunk }),\n\t\t\t);\n\t\t}\n\n\t\tawait Promise.all(putPromises);\n\t}\n\n\treturn clock + 1;\n};\n\n/**\n * For now this is a helper method that creates a Y.Doc and then re-encodes a document update.\n * In the future this will be handled by Yjs without creating a Y.Doc (constant memory consumption).\n *\n * @param {Array<Uint8Array>} updates\n * @return {{update:Uint8Array, sv: Uint8Array}}\n */\nexport const mergeUpdates = (updates) => {\n\tconst ydoc = new Y.Doc();\n\tydoc.transact(() => {\n\t\tfor (let i = 0; i < updates.length; i++) {\n\t\t\tY.applyUpdate(ydoc, updates[i]);\n\t\t}\n\t});\n\treturn { update: Y.encodeStateAsUpdate(ydoc), sv: Y.encodeStateVector(ydoc) };\n};\n\n/**\n * @param {Uint8Array} buf\n * @return {{ sv: Uint8Array, clock: number }}\n */\nexport const decodeMongodbStateVector = (buf) => {\n\tlet decoder;\n\tif (Buffer.isBuffer(buf)) {\n\t\tdecoder = decoding.createDecoder(buf);\n\t} else if (Buffer.isBuffer(buf?.buffer)) {\n\t\tdecoder = decoding.createDecoder(buf.buffer);\n\t} else {\n\t\tthrow new Error('No buffer provided at decodeMongodbStateVector()');\n\t}\n\tconst clock = decoding.readVarUint(decoder);\n\tconst sv = decoding.readVarUint8Array(decoder);\n\treturn { sv, clock };\n};\n\n/**\n * @param {any} db\n * @param {string} docName\n */\nexport const readStateVector = async (db, docName) => {\n\tconst doc = await db.get({ ...createDocumentStateVectorKey(docName) });\n\tif (!doc?.value) {\n\t\t// no state vector created yet or no document exists\n\t\treturn { sv: null, clock: -1 };\n\t}\n\treturn decodeMongodbStateVector(doc.value);\n};\n\nexport const getAllSVDocs = async (db) => db.readAsCursor({ version: 'v1_sv' });\n\n/**\n * Merge all MongoDB documents of the same yjs document together.\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} stateAsUpdate\n * @param {Uint8Array} stateVector\n * @return {Promise<number>} returns the clock of the flushed doc\n */\nexport const flushDocument = async (db, docName, stateAsUpdate, stateVector) => {\n\tconst clock = await storeUpdate(db, docName, stateAsUpdate);\n\tawait writeStateVector(db, docName, stateVector, clock);\n\tawait clearUpdatesRange(db, docName, 0, clock);\n\treturn clock;\n};\n","import * as Y from 'yjs';\nimport * as binary from 'lib0/binary';\nimport * as promise from 'lib0/promise';\nimport { MongoAdapter } from './mongo-adapter.js';\nimport * as U from './utils.js';\n\nexport class MongodbPersistence {\n\t/**\n\t * Create a y-mongodb persistence instance.\n\t * @param {string} location The connection string for the MongoDB instance.\n\t * @param {object} [opts] Additional optional parameters.\n\t * @param {string} [opts.collectionName] Name of the collection where all\n\t * documents are stored. Default: \"yjs-writings\"\n\t * @param {boolean} [opts.multipleCollections] When set to true, each document gets\n\t * an own collection (instead of all documents stored in the same one). When set to true,\n\t * the option collectionName gets ignored. Default: false\n\t * @param {number} [opts.flushSize] The number of stored transactions needed until\n\t * they are merged automatically into one Mongodb document. Default: 400\n\t */\n\tconstructor(location, opts = {}) {\n\t\tconst { collectionName = 'yjs-writings', multipleCollections = false, flushSize = 400 } = opts;\n\t\tif (typeof collectionName !== 'string' || !collectionName) {\n\t\t\tthrow new Error(\n\t\t\t\t'Constructor option \"collectionName\" is not a valid string. Either dont use this option (default is \"yjs-writings\") or use a valid string! Take a look into the Readme for more information: https://github.com/MaxNoetzold/y-mongodb-provider#persistence--mongodbpersistenceconnectionlink-string-options-object',\n\t\t\t);\n\t\t}\n\t\tif (typeof multipleCollections !== 'boolean') {\n\t\t\tthrow new Error(\n\t\t\t\t'Constructor option \"multipleCollections\" is not a boolean. Either dont use this option (default is \"false\") or use a valid boolean! Take a look into the Readme for more information: https://github.com/MaxNoetzold/y-mongodb-provider#persistence--mongodbpersistenceconnectionlink-string-options-object',\n\t\t\t);\n\t\t}\n\t\tif (typeof flushSize !== 'number' || flushSize <= 0) {\n\t\t\tthrow new Error(\n\t\t\t\t'Constructor option \"flushSize\" is not a valid number. Either dont use this option (default is \"400\") or use a valid number larger than 0! Take a look into the Readme for more information: https://github.com/MaxNoetzold/y-mongodb-provider#persistence--mongodbpersistenceconnectionlink-string-options-object',\n\t\t\t);\n\t\t}\n\t\tconst db = new MongoAdapter(location, {\n\t\t\tcollection: collectionName,\n\t\t\tmultipleCollections,\n\t\t});\n\t\tthis.flushSize = flushSize ?? U.PREFERRED_TRIM_SIZE;\n\t\tthis.multipleCollections = multipleCollections;\n\n\t\t// scope the queue of the transaction to each docName\n\t\t// -> this should allow concurrency for different rooms\n\t\t// Idea and adjusted code from: https://github.com/fadiquader/y-mongodb/issues/10\n\t\tthis.tr = {};\n\n\t\t/**\n\t\t * Execute an transaction on a database. This will ensure that other processes are\n\t\t * currently not writing.\n\t\t *\n\t\t * This is a private method and might change in the future.\n\t\t *\n\t\t * @template T\n\t\t *\n\t\t * @param {function(any):Promise<T>} f A transaction that receives the db object\n\t\t * @return {Promise<T>}\n\t\t */\n\t\tthis._transact = (docName, f) => {\n\t\t\tif (!this.tr[docName]) {\n\t\t\t\tthis.tr[docName] = promise.resolve();\n\t\t\t}\n\n\t\t\tconst currTr = this.tr[docName];\n\t\t\tlet nextTr = null;\n\n\t\t\tnextTr = (async () => {\n\t\t\t\tawait currTr;\n\n\t\t\t\tlet res = /** @type {any} */ (null);\n\t\t\t\ttry {\n\t\t\t\t\tres = await f(db);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.warn('Error during saving transaction', err);\n\t\t\t\t}\n\n\t\t\t\t// once the last transaction for a given docName resolves, remove it from the queue\n\t\t\t\tif (this.tr[docName] === nextTr) {\n\t\t\t\t\tdelete this.tr[docName];\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t})();\n\n\t\t\tthis.tr[docName] = nextTr;\n\n\t\t\treturn this.tr[docName];\n\t\t};\n\t}\n\n\t/**\n\t * Create a Y.Doc instance with the data persistet in mongodb.\n\t * Use this to temporarily create a Yjs document to sync changes or extract data.\n\t *\n\t * @param {string} docName\n\t * @return {Promise<Y.Doc>}\n\t */\n\tgetYDoc(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst updates = await U.getMongoUpdates(db, docName);\n\t\t\tconst ydoc = new Y.Doc();\n\t\t\tydoc.transact(() => {\n\t\t\t\tfor (let i = 0; i < updates.length; i++) {\n\t\t\t\t\tY.applyUpdate(ydoc, updates[i]);\n\t\t\t\t\tupdates[i] = null;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (updates.length > this.flushSize) {\n\t\t\t\tawait U.flushDocument(db, docName, Y.encodeStateAsUpdate(ydoc), Y.encodeStateVector(ydoc));\n\t\t\t}\n\t\t\treturn ydoc;\n\t\t});\n\t}\n\n\t/**\n\t * Store a single document update to the database.\n\t *\n\t * @param {string} docName\n\t * @param {Uint8Array} update\n\t * @return {Promise<number>} Returns the clock of the stored update\n\t */\n\tstoreUpdate(docName, update) {\n\t\treturn this._transact(docName, (db) => U.storeUpdate(db, docName, update));\n\t}\n\n\t/**\n\t * The state vector (describing the state of the persisted document - see https://github.com/yjs/yjs#Document-Updates) is maintained in a separate field and constantly updated.\n\t *\n\t * This allows you to sync changes without actually creating a Yjs document.\n\t *\n\t * @param {string} docName\n\t * @return {Promise<Uint8Array>}\n\t */\n\tgetStateVector(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst { clock, sv } = await U.readStateVector(db, docName);\n\t\t\tlet curClock = -1;\n\t\t\tif (sv !== null) {\n\t\t\t\tcurClock = await U.getCurrentUpdateClock(db, docName);\n\t\t\t}\n\t\t\tif (sv !== null && clock === curClock) {\n\t\t\t\treturn sv;\n\t\t\t} else {\n\t\t\t\t// current state vector is outdated\n\t\t\t\tconst updates = await U.getMongoUpdates(db, docName);\n\t\t\t\tconst { update, sv: newSv } = U.mergeUpdates(updates);\n\t\t\t\tawait U.flushDocument(db, docName, update, newSv);\n\t\t\t\treturn newSv;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the differences directly from the database.\n\t * The same as Y.encodeStateAsUpdate(ydoc, stateVector).\n\t * @param {string} docName\n\t * @param {Uint8Array} stateVector\n\t */\n\tasync getDiff(docName, stateVector) {\n\t\tconst ydoc = await this.getYDoc(docName);\n\t\treturn Y.encodeStateAsUpdate(ydoc, stateVector);\n\t}\n\n\t/**\n\t * Delete a document, and all associated data from the database.\n\t * When option multipleCollections is set, it removes the corresponding collection\n\t * @param {string} docName\n\t * @return {Promise<void>}\n\t */\n\tclearDocument(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tif (!this.multipleCollections) {\n\t\t\t\tawait db.del(U.createDocumentStateVectorKey(docName));\n\t\t\t\tawait U.clearUpdatesRange(db, docName, 0, binary.BITS32);\n\t\t\t} else {\n\t\t\t\tawait db.dropCollection(docName);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Persist some meta information in the database and associate it\n\t * with a document. It is up to you what you store here.\n\t * You could, for example, store credentials here.\n\t *\n\t * @param {string} docName\n\t * @param {string} metaKey\n\t * @param {any} value\n\t * @return {Promise<void>}\n\t */\n\tsetMeta(docName, metaKey, value) {\n\t\t/*\tUnlike y-leveldb, we simply store the value here without encoding\n\t \t\t it in a buffer beforehand. */\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tawait db.put(U.createDocumentMetaKey(docName, metaKey), { value });\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve a store meta value from the database. Returns undefined if the\n\t * metaKey doesn't exist.\n\t *\n\t * @param {string} docName\n\t * @param {string} metaKey\n\t * @return {Promise<any>}\n\t */\n\tgetMeta(docName, metaKey) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst res = await db.get({\n\t\t\t\t...U.createDocumentMetaKey(docName, metaKey),\n\t\t\t});\n\t\t\tif (!res?.value) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn res.value;\n\t\t});\n\t}\n\n\t/**\n\t * Delete a store meta value.\n\t *\n\t * @param {string} docName\n\t * @param {string} metaKey\n\t * @return {Promise<any>}\n\t */\n\tdelMeta(docName, metaKey) {\n\t\treturn this._transact(docName, (db) =>\n\t\t\tdb.del({\n\t\t\t\t...U.createDocumentMetaKey(docName, metaKey),\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Retrieve the names of all stored documents.\n\t *\n\t * @return {Promise<string[]>}\n\t */\n\tgetAllDocNames() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tif (this.multipleCollections) {\n\t\t\t\t// get all collection names from db\n\t\t\t\treturn db.getCollectionNames();\n\t\t\t} else {\n\t\t\t\t// when all docs are stored in the same collection we just need to get all\n\t\t\t\t//  statevectors and return their names\n\t\t\t\tconst docs = await U.getAllSVDocs(db);\n\t\t\t\treturn docs.map((doc) => doc.docName);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve the state vectors of all stored documents.\n\t * You can use this to sync two y-leveldb instances.\n\t * !Note: The state vectors might be outdated if the associated document\n\t * is not yet flushed. So use with caution.\n\t * @return {Promise<{ name: string, sv: Uint8Array, clock: number }[]>}\n\t * @todo may not work?\n\t */\n\tgetAllDocStateVectors() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tconst docs = await U.getAllSVDocs(db);\n\t\t\treturn docs.map((doc) => {\n\t\t\t\tconst { sv, clock } = U.decodeMongodbStateVector(doc.value);\n\t\t\t\treturn { name: doc.docName, sv, clock };\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internally y-mongodb stores incremental updates. You can merge all document\n\t * updates to a single entry. You probably never have to use this.\n\t * It is done automatically every $options.flushsize (default 400) transactions.\n\t *\n\t * @param {string} docName\n\t * @return {Promise<void>}\n\t */\n\tflushDocument(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst updates = await U.getMongoUpdates(db, docName);\n\t\t\tconst { update, sv } = U.mergeUpdates(updates);\n\t\t\tawait U.flushDocument(db, docName, update, sv);\n\t\t});\n\t}\n\n\t/**\n\t * Delete the whole yjs mongodb\n\t * @return {Promise<void>}\n\t */\n\tflushDB() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tawait U.flushDB(db);\n\t\t});\n\t}\n\n\t/**\n\t * Closes open database connection\n\t * @returns {Promise<void>}\n\t */\n\tdestroy() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tawait db.close();\n\t\t});\n\t}\n}\n"],"names":["MongoClient","binary","encoding","Y","Buffer","decoding","U.PREFERRED_TRIM_SIZE","promise","U.getMongoUpdates","U.flushDocument","U.storeUpdate","U.readStateVector","U.getCurrentUpdateClock","U.mergeUpdates","U.createDocumentStateVectorKey","U.clearUpdatesRange","U.createDocumentMetaKey","U.getAllSVDocs","U.decodeMongodbStateVector","U.flushDB"],"mappings":"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"}